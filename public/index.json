[{"content":"The Universal Package Manager üåü Nix is a powerful tool designed to revolutionize package management and system configuration. With its declarative approach, robust reproducibility, and ability to handle complex dependency trees, Nix has gained a reputation as one of the most innovative tools for developers, DevOps professionals, and software enthusiasts alike.\nIntroduction to Nix Nix is an advanced package manager that takes a declarative and reproducible approach to managing software. Unlike traditional package managers, Nix ensures that your system remains consistent and isolated, making it easier to reproduce builds across different environments. However, Nix comes with a steep learning curve, requiring time and effort to fully grasp its concepts and capabilities, particularly for those new to declarative configurations and functional programming paradigms.\nA Brief History Nix was created in 2003 by Eelco Dolstra as part of his PhD thesis. The goal was to solve common issues with traditional package managers, such as dependency conflicts (the \u0026ldquo;dependency hell\u0026rdquo;) and lack of reproducibility. Over the years, Nix has evolved into a versatile ecosystem, including tools like NixOS (an operating system built on Nix), home-manager (for managing user configurations), and nix-darwin (for macOS integration).\nWhy Nix is Revolutionary Reproducible Builds Nix ensures that every build is reproducible by storing packages in isolated paths and using cryptographic hashes for dependencies. This means your software will behave the same across machines and environments.\nDeclarative Configurations With Nix, you can define your entire system configuration in a single file. This simplifies managing dependencies and makes it easy to share or version-control your setup.\nIsolated Environments Nix allows you to create isolated development environments where each project can have its own dependencies without affecting the global system.\nCross-Language Package Management Nix supports a wide variety of programming languages, from Python and JavaScript to Rust and Go, making it a universal package manager.\nGetting Started with Nix Linux Installation and Setting Up Nix Step 1: Install Nix Update system packages: sudo apt update \u0026amp;\u0026amp; sudo apt upgrade -y Install Nix: sh \u0026lt;(curl -L https://nixos.org/nix/install) --daemon Configure Nix for experimental features (flakes): mkdir -p ~/.config/nix echo \u0026#34;experimental-features = nix-command flakes\u0026#34; \u0026gt;\u0026gt; ~/.config/nix/nix.conf Restart the Nix daemon and reboot: sudo systemctl restart nix-daemon sudo reboot Install Nix Flakes and Home Manager Step 1: Initialize the Flake File Create a new directory to hold your configuration files: mkdir -p ~/dotfiles/{linux,darwin,shared/modules/services} cd ~/dotfiles/linux Initialize a flake.nix template in the current directory if you don\u0026rsquo;t have an existing config: nix flake init -t github:nix-community/home-manager Step 2: Install Home Manager For an existing configuration, use: nix run home-manager/master -- init --switch /path/to/flake#username Replace /path/to/flake#username with the full path to your flake.nix file and your system\u0026rsquo;s username.\nFor a new configuration, use: nix run home-manager/master -- init --switch This creates a basic home.nix template file.\nStep 3: Update Configuration Files Open the flake.nix and home.nix files. Replace placeholders (e.g., username) with your actual username. Save and exit the files. Run home-manager switch --flake ~/dotfiles/nix/linux#username -b backup to apply changes Step 4: Finalize Installation Restart the Nix daemon: sudo systemctl restart nix-daemon Reboot the system: sudo reboot If Zsh is not installed as the default shell, set it up:\nFor root users: chsh -s $(which zsh) For added users: sudo sh -c \u0026#39;echo \u0026#34;/home/username/.nix-profile/bin/zsh\u0026#34; \u0026gt;\u0026gt; /etc/shells\u0026#39; chsh -s /home/username/.nix-profile/bin/zsh Replace username with your actual system username.\nUse Home Manager to apply the configurations:\nhome-manager switch --flake ~/dotfiles/nix/linux#root -b backup Run this command every time you rebuild your system configuration.\nExample File Structure Here‚Äôs a suggested file structure for managing configurations:\nKey Points:\ndarwin and linux are platform-specific configurations. shared contains reusable modules and configurations for tools like Tmux, Neovim, and Starship. macOS Installation Install Nix:\nsh \u0026lt;(curl -L https://nixos.org/nix/install) This installs the Nix package manager, enabling you to use its declarative and reproducible system for managing dependencies.\nInstall nix-darwin:\nnix run nix-darwin --extra-experimental-features \u0026#34;nix-command flakes\u0026#34; -- switch --flake ~/location-of-flake Explanation:\nThe above command installs nix-darwin, a tool specifically designed for macOS systems that extends Nix capabilities to manage macOS-specific configurations. nix-darwin provides the darwin-rebuild utility, which allows you to build, switch, and manage your macOS configurations defined in your flake file. Example Workflow with darwin-rebuild:\nAfter setting up your configuration in flake.nix and home.nix, you can use the following commands to manage your macOS system:\nBuild and apply configurations:\ndarwin-rebuild switch --flake ~/location-of-flake Build configurations without applying:\ndarwin-rebuild build --flake ~/location-of-flake Rollback to the previous configuration:\ndarwin-rebuild rollback The configurations can include macOS-specific settings, system preferences, and installed packages.\nUseful References Nix Official Installation: https://nixos.org/download nix-darwin GitHub: https://github.com/LnL7/nix-darwin home-manager: https://nix-community.github.io/home-manager/ Tips Use nix-collect-garbage -d to clean up unused packages Find flake and home.nix templates online Conclusion Nix offers a powerful, reproducible approach to package management and system configuration. While it has a learning curve, the benefits of declarative, isolated environments make it a compelling choice for developers and system administrators.\n","permalink":"https://abhishek-1804.github.io/abhishekdeshpande_portfolio/posts/first/","summary":"\u003ch1 id=\"the-universal-package-manager-\"\u003eThe Universal Package Manager üåü\u003c/h1\u003e\n\u003cp\u003eNix is a powerful tool designed to revolutionize package management and system configuration. With its declarative approach, robust reproducibility, and ability to handle complex dependency trees, Nix has gained a reputation as one of the most innovative tools for developers, DevOps professionals, and software enthusiasts alike.\u003c/p\u003e\n\u003ch2 id=\"introduction-to-nix\"\u003eIntroduction to Nix\u003c/h2\u003e\n\u003cp\u003eNix is an advanced package manager that takes a \u003cstrong\u003edeclarative and reproducible approach\u003c/strong\u003e to managing software. Unlike traditional package managers, Nix ensures that your system remains consistent and isolated, making it easier to reproduce builds across different environments. However, Nix comes with a steep learning curve, requiring time and effort to fully grasp its concepts and capabilities, particularly for those new to declarative configurations and functional programming paradigms.\u003c/p\u003e","title":"Why Nix is Awesome!"},{"content":"Why Docker: Unlocking the Power of Containerization üöÄ Docker provides a fantastic way to quickly explore and use tools, services, or applications without the hassle of manual installation and dependency management. Here are some cool Docker images you can experiment with, along with instructions to get started.\nBasic Docker Commands to Know Before diving into specific images, here are some essential Docker commands every user should know:\ndocker images ‚Äì List all images on your system. docker ps -a ‚Äì Show all containers, including stopped ones. docker volumes ls ‚Äì View all Docker volumes. docker networks ls ‚Äì List all Docker networks. Cool Docker Images to Try Out 1. linuxserver/foldingathome Overview The Folding@Home project lets you contribute to disease research, including cancer, Alzheimer‚Äôs, and COVID-19, by donating unused computational power. This Docker image provides an easy way to join the network. You can set the account name and machine name in the CLI or do it later. If you have an NVIDIA GPU, you can enable it for better performance.\nStats:\n‚≠ê Over 1M+ pulls\nHow to Run docker run -d \\ --name=foldingathome \\ -e PUID=1000 \\ -e PGID=1000 \\ -e TZ=Etc/UTC \\ -e ACCOUNT_TOKEN= \\ -e MACHINE_NAME= \\ -e CLI_ARGS= `# optional` \\ -p 7396:7396 `# optional` \\ -v /path/to/foldingathome/data:/config `# optional` \\ --restart unless-stopped \\ lscr.io/linuxserver/foldingathome:latest Refer to the official docs here.\n2. linuxserver/libreoffice Overview A containerized version of LibreOffice that allows you to edit documents directly from within a containerized environment.\nStats:\n‚≠ê Over 500K+ pulls\nHow to Run docker run -d \\ --name=libreoffice \\ --security-opt seccomp=unconfined `# optional` \\ -e PUID=1000 \\ -e PGID=1000 \\ -e TZ=Etc/UTC \\ -p 3000:3000 \\ -p 3001:3001 \\ -v /path/to/config:/config `# optional` \\ --restart unless-stopped \\ lscr.io/linuxserver/libreoffice:latest Refer to the official docs here.\n3. linuxserver/firefox Overview Run a full instance of Firefox in a container. Great for testing or maintaining a secure browsing environment.\nStats:\n‚≠ê Over 500K+ pulls\nHow to Run docker run -d \\ --name=firefox \\ --security-opt seccomp=unconfined `# optional` \\ -e PUID=1000 \\ -e PGID=1000 \\ -e TZ=Etc/UTC \\ -e FIREFOX_CLI=https://www.linuxserver.io/ `# optional` \\ -p 3000:3000 \\ -p 3001:3001 \\ -v /path/to/config:/config `# optional` \\ --shm-size=\u0026#34;1gb\u0026#34; \\ --restart unless-stopped \\ lscr.io/linuxserver/firefox:latest Refer to the official docs here.\n4. corentinth/it-tools Overview A collection of handy developer tools available as a web app. Includes encoders, decoders, converters, and more, all with great UX.\nStats:\n‚≠ê Over 5M+ pulls\nHow to Run docker run -d \\ --name=it-tools \\ -p 8080:80 \\ corentinth/it-tools Refer to the official docs here.\n5. ollama/ollama Overview Run large language models with minimal setup. Perfect for experimenting with AI and machine learning tasks.\nStats:\n‚≠ê Over 5M+ pulls\nHow to Run docker run -d \\ --name=ollama \\ -p 11434:11434 \\ -v ollama:/root/.ollama \\ ollama/ollama Refer to the official docs here.\nBest Practices Use --rm in the docker run command for temporary containers, e.g., running a Java file: docker run --rm openjdk:latest java HelloWorld.java\nUse Docker Scout Quickview to check for vulnerabilities in Docker images: docker scout quickview \u0026lt;image-name\u0026gt;\nUse Docker networks to isolate containers and allow communication between specific ones: docker network create my_network\nDocker Compose File for All Images Here‚Äôs a docker-compose.yml to run all the above images together. It uses local ports starting from 3001 and demonstrates two isolated networks.\nversion: \u0026#34;3.9\u0026#34; networks: isolated_network1: isolated_network2: services: foldingathome: image: lscr.io/linuxserver/foldingathome:latest container_name: foldingathome networks: - isolated_network1 environment: PUID: 1000 PGID: 1000 TZ: Etc/UTC ACCOUNT_TOKEN: \u0026#34;\u0026#34; MACHINE_NAME: \u0026#34;\u0026#34; ports: - \u0026#34;3000:7396\u0026#34; libreoffice: image: lscr.io/linuxserver/libreoffice:latest container_name: libreoffice networks: - isolated_network2 environment: PUID: 1000 PGID: 1000 TZ: Etc/UTC ports: - \u0026#34;3001:3001\u0026#34; - \u0026#34;3002:3002\u0026#34; firefox: image: lscr.io/linuxserver/firefox:latest container_name: firefox networks: - isolated_network1 environment: PUID: 1000 PGID: 1000 TZ: Etc/UTC ports: - \u0026#34;3003:3003\u0026#34; - \u0026#34;3004:3004\u0026#34; it-tools: image: corentinth/it-tools container_name: it-tools networks: - isolated_network2 ports: - \u0026#34;3005:80\u0026#34; ollama: image: ollama/ollama container_name: ollama networks: - isolated_network1 volumes: - ollama:/root/.ollama ports: - \u0026#34;3006:11434\u0026#34; To run all the services at once, use docker-compose up -d. This will start all containers in the background. You can access them in your browser using the defined ports. To stop and remove all the containers, use docker-compose down.\nConclusion These Docker images showcase the incredible range of use cases Docker supports‚Äîfrom contributing to scientific research to running AI models, secure browsing, and developer tools. Each of these is lightweight, easy to run, and can be explored with just a few commands.\nRefer to Docker Desktop installation here. Stay tuned for more Docker image reviews and tutorials!\n","permalink":"https://abhishek-1804.github.io/abhishekdeshpande_portfolio/posts/second/","summary":"\u003ch1 id=\"why-docker-unlocking-the-power-of-containerization-\"\u003eWhy Docker: Unlocking the Power of Containerization üöÄ\u003c/h1\u003e\n\u003cp\u003eDocker provides a fantastic way to quickly explore and use tools, services, or applications without the hassle of manual installation and dependency management. Here are some cool Docker images you can experiment with, along with instructions to get started.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"basic-docker-commands-to-know\"\u003eBasic Docker Commands to Know\u003c/h2\u003e\n\u003cp\u003eBefore diving into specific images, here are some essential Docker commands every user should know:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003edocker images\u003c/code\u003e ‚Äì List all images on your system.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003edocker ps -a\u003c/code\u003e ‚Äì Show all containers, including stopped ones.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003edocker volumes ls\u003c/code\u003e ‚Äì View all Docker volumes.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003edocker networks ls\u003c/code\u003e ‚Äì List all Docker networks.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"cool-docker-images-to-try-out\"\u003eCool Docker Images to Try Out\u003c/h2\u003e\n\u003ch3 id=\"1-linuxserverfoldingathome\"\u003e1. linuxserver/foldingathome\u003c/h3\u003e\n\u003ch4 id=\"overview\"\u003eOverview\u003c/h4\u003e\n\u003cp\u003eThe Folding@Home project lets you contribute to disease research, including cancer, Alzheimer‚Äôs, and COVID-19, by donating unused computational power. This Docker image provides an easy way to join the network. You can set the account name and machine name in the CLI or do it later. If you have an NVIDIA GPU, you can enable it for better performance.\u003c/p\u003e","title":"Exploring Docker: Essential Commands, Best Practices, and Cool Images"},{"content":"Hi, I\u0026rsquo;m Abhishek Deshpande üëã I‚Äôm a passionate Software Engineer with experience in building scalable web applications, machine learning models, and REST APIs. I enjoy creating solutions that solve real-world problems using a combination of data analysis, cloud technologies, and modern development practices.\nSkills üåü Here‚Äôs what I bring to the table:\nCategory Technologies/Skills Programming Python, SQL, JavaScript, TypeScript, HTML/CSS Web Development React, Next.js, Node.js, Express, REST APIs Data Analysis Numpy, Pandas, Power BI, Excel Cloud \u0026amp; DevOps Docker, AWS, Firebase, Linux, CI/CD Databases PostgreSQL, MSSQL, MongoDB Tooling \u0026amp; Testing Git, Pytest Machine Learning Deep Learning, Transfer Learning, OpenCV Others Agile, SDLC (Software Development Life Cycle), Bash Scripting Work Experience üíº Data Analyst Ganit Inc (August 2022 ‚Äì March 2023)\nBuilt RESTful APIs using Python and machine learning models to extract metadata from medical prescriptions with 92% accuracy. Designed and maintained Power BI dashboards for tracking over 20 KPIs, improving operational efficiency by 22% and driving an 18% revenue increase annually. Automated workflows using Bash scripting, Python, and AWS EC2 to refresh dashboards dynamically. Managed code reviews and pull requests in Git to ensure high-quality, maintainable code. Data Analyst Intern Ganit Inc (February 2022 ‚Äì July 2022)\nReduced fraud analytics processing time by 40% through optimized data workflows using Pandas and Numpy. Developed Python scripts to link related emails using regex, improving data linkage accuracy by 25%. Automated error handling pipelines with Python, reducing manual investigation time by 50%. Performed stress testing on an ELK-stack-based front-end tool to ensure robust performance. Projects üöÄ Project Technologies Description Notion Notes App Flask, Python, Nix, Docker, DigitalOcean, Traefik, Notion API, OpenAI API A containerized app integrated with Notion API to manage notes using Siri Shortcuts, deployed on DigitalOcean. Deep Q-Learning Snake Game Python, PyTorch, Reinforcement Learning An AI-based Snake game with Deep Q-Learning and a GUI to visualize performance in real-time. Cotton Disease Classification Python, TensorFlow, Transfer Learning A transfer learning model achieving 96%-97% accuracy for cotton disease classification using CNNs. Open Source Contributions üåê Project Contribution tldr-pages (51.8k+ GitHub stars) Actively contribute to the repository by resolving issues and adding/improving command pages such as chat, lazygit, and speedtest. View Contributions Education üéì Master‚Äôs of Science in Computer Science Arizona State University\nRelavent Coursework:\nAlgorithms, Information Assurance and Security, Operating Systems, Software Testing, Data Processing Bachelor‚Äôs of Technology in Aeronautical Engineering Manipal Institute of Technology\nRelevant Coursework:\nPython, C, Statistics, Data Structures, Web Development Contact Me üì¨ ","permalink":"https://abhishek-1804.github.io/abhishekdeshpande_portfolio/portfolio/","summary":"\u003ch1 id=\"hi-im-abhishek-deshpande-\"\u003eHi, I\u0026rsquo;m Abhishek Deshpande üëã\u003c/h1\u003e\n\u003cp\u003eI‚Äôm a passionate \u003cstrong\u003eSoftware Engineer\u003c/strong\u003e with experience in building scalable web applications, machine learning models, and REST APIs. I enjoy creating solutions that solve real-world problems using a combination of data analysis, cloud technologies, and modern development practices.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"skills-\"\u003eSkills üåü\u003c/h2\u003e\n\u003cp\u003eHere‚Äôs what I bring to the table:\u003c/p\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003e\u003cstrong\u003eCategory\u003c/strong\u003e\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003e\u003cstrong\u003eTechnologies/Skills\u003c/strong\u003e\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003cstrong\u003eProgramming\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003ePython, SQL, JavaScript, TypeScript, HTML/CSS\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003cstrong\u003eWeb Development\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eReact, Next.js, Node.js, Express, REST APIs\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003cstrong\u003eData Analysis\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eNumpy, Pandas, Power BI, Excel\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003cstrong\u003eCloud \u0026amp; DevOps\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eDocker, AWS, Firebase, Linux, CI/CD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003cstrong\u003eDatabases\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003ePostgreSQL, MSSQL, MongoDB\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003cstrong\u003eTooling \u0026amp; Testing\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eGit, Pytest\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003cstrong\u003eMachine Learning\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eDeep Learning, Transfer Learning, OpenCV\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003cstrong\u003eOthers\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eAgile, SDLC (Software Development Life Cycle), Bash Scripting\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003chr\u003e\n\u003ch2 id=\"work-experience-\"\u003eWork Experience üíº\u003c/h2\u003e\n\u003ch3 id=\"data-analyst\"\u003eData Analyst\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003eGanit Inc\u003c/strong\u003e (August 2022 ‚Äì March 2023)\u003c/p\u003e","title":"About Me"}]